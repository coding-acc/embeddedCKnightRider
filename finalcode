/*
 * ENEL3DB_DESIGN_CODE.c
 *
 * KBSM LIGHTING
 * 
 * Code for Dash Display and Control unit
 * Chip: Atmega32
 */ 

#include <avr/io.h>
#include <avr/interrupt.h> 
#define F_CPU 1000000UL				/* Define CPU Frequency e.g. here 1MHz */
#include <avr/io.h>					/* Includevhhvvhvh AVR std. library file */
#include <util/delay.h>				/* Include Delay header file */

#define LCD_Dir  DDRB				/* Define LCD data port direction */
#define LCD_Port PORTB				/* Define LCD data port */
#define RS PB0						/* Define Register Select pin */
#define EN PB1 						/* Define Enable signal pin */
#define Switches_Dir  DDRC			/* Define Switches port direction */
#define Switches_Port PORTC			/* Define Switches port */
#define Interrupt_Dir  DDRD			/* Define Interrupt port direction */
#define Interrupt_Port PORTD		/* Define Interrupt port */
#define INT0_pin PIND2				/*Define Interrupt 0 pin */
int hazazrd_flag = 0;
int blown_bulb_flag =0;				/* used to detect a blown bulb*/


void LCD_Command( unsigned char cmnd );
void LCD_Init (void);
void LCD_Clear();
void LCD_Char( unsigned char data );
void LCD_String (char *str);
void button_input();
void scan_blown_bulb();

									// light control functions

void autoDim (void)
{
	PORTA |= 1<<PORTA0;
	
}

void brake (void)				 //all 6 bulbs bright
{
	PORTA |= 0xFC;
	
}
void off (void)					//switch off all lights
{
	
	PORTA &= 0x00;
	
}
void dim (void)				//to bulb driver to initiate dimming
{
	PORTA |= 1 << PORTA1;
}
void indicateR (void)		//Right indicator function
{
	PORTA |= 1<<PORTA4;
	_delay_ms(500);
	PORTA |= 1<<PORTA3;
	_delay_ms(500);
	PORTA |= 1<<PORTA2;
	_delay_ms(500);
	PORTA = 0;
	_delay_ms(250);
}

void indicateL (void)		//left indicator function
{
	PORTA |= 1<<PORTA5;
	_delay_ms(500);
	PORTA |= 1<<PORTA6;
	_delay_ms(500);
	PORTA |= 1<<PORTA7;
	_delay_ms(500);
	PORTA = 0;
	_delay_ms(250);
}

void hazards (void)			// Hazard Function
{
	while (!(~PINC & 0x40))
	{
	cli();	
	
	PORTA = 0x00;
	_delay_ms(50);
	PORTA |= 0x30;
	_delay_ms(250);
	PORTA = 0x78;
	_delay_ms(250);
	PORTA |= 0xFC;
	_delay_ms(250);
	PORTA = 0x00;
	_delay_ms(250);
	
	}
	sei();
}
						// end of light control 



ISR (INT0_vect)						//External interrupt_zero ISR
{
	/*
	*This ISR will be used for user inputs from buttons (GUI)
	*The interrupt will be triggered by a logic transition (LOW to HIGH of any of the input pins from the GUI)
	*
	*/
	button_input();
	
	
}

ISR (INT1_vect)						//External interrupt_one ISR
{
	
}


int main(void)
{
    
	LCD_Init();						/* Initialization of LCD*/
	
	/*
	*Disabling the JTAG 
	*/
	MCUCSR = (1<<JTD);
	MCUCSR = (1<<JTD);
	
	/*
	*Setup Interrupts of the MCU
	*/
	GICR=0xc0;						/*Enable External Interrupts INT0 and INT1*/
	MCUCR=0x0f;						/*Configure INT0 active high level triggered and INT1 as rising edge*/
	sei();							/* Enable global interrupts by setting global interrupt enable bit in SREG*/
	Interrupt_Dir =0xff;						/*Configure INT0,INT1 as input*/
	

	
	DDRA = 0xFF;					//configuring port a as output
	PORTA = 0x00;
	
	/*
	*Setup the MCU ports
	*/
	Switches_Dir=  0XFF;			/*Configure Switches_Port as input*/
	/* 
	test for blown bulb
	*/
	PORTA |= 0xFC;					/* activate light bulbs--*/				
	scan_blown_bulb();				
	if (blown_bulb_flag)
	{
		
		LCD_Command(0xC0);			/* go to line 2*/
		LCD_String("PROCEED WITH CARE!");
		_delay_ms(5000);
		LCD_Command(0x80);			/* go to line 1*/
	}
	_delay_ms(5000);
	off();
									//end of blown bulb test
	
	
									/*GUI code*/
	
    while (1) 
    {
		LCD_Clear();
		LCD_String("KBSM LIGHTING");	/* Write string on 1st line of LCD*/
		_delay_ms(5000);
		
		
		
		
    }
}



void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);	/* Sending upper nibble */
	LCD_Port &= ~ (1<<RS);							/* RS=0, command reg. */
	LCD_Port |= (1<<EN);							/* Enable pulse */
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
	_delay_us(200);
	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);		/* Sending lower nibble */
	LCD_Port |= (1<<EN);
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
	_delay_ms(2);
}

void LCD_Init (void)	/* LCD Initialize function */
{
	LCD_Dir = 0xFF;		/* Make LCD port direction as o/p */
	_delay_ms(20);		/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x33);
	LCD_Command(0x32);	/* Send for 4 bit initialization of LCD  */
	LCD_Command(0x28);	/* 2 line, 5*7 matrix in 4-bit mode */
	LCD_Command(0x0c);	/* Display on cursor off */
	LCD_Command(0x06);	/* Increment cursor (shift cursor to right) */
	LCD_Command(0x01);	/* Clear display screen */
}

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
}


void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);/* Sending upper nibble */
	LCD_Port |= (1<<RS);  /* RS=1, data reg. */
	LCD_Port|= (1<<EN);
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
	_delay_us(200);
	LCD_Port = (LCD_Port & 0x0F) | (data << 4);  /* Sending lower nibble */
	LCD_Port |= (1<<EN);
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
	_delay_ms(2);
}

void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
	{
		LCD_Char (str[i]);
	}
}
								/*end of GUI code*/
								

								/*control unit code*/
			
void button_input()
{
	LCD_Clear();
	LCD_Command(0x80);					// go to row1
	
	while ((PIND & (1 << INT0_pin))==(1 << INT0_pin))
	{
	 if (!(~PINC & 0x40))
		{
			LCD_Clear();
			LCD_String("Hazard mode");		//print string
			hazards();
			hazazrd_flag =1;				//Set hazard on flag
			
			_delay_ms(500);
			
		}
	
		 if (!(~PINC & 0x08))				//turn right
		{
		
			LCD_Clear();
			LCD_String("Turn Right");		//print string
			
				do
				{
					PORTA |= 1<<PORTA4;
					_delay_ms(500);
					PORTA |= 1<<PORTA3;
					_delay_ms(500);
					PORTA |= 1<<PORTA2;
					_delay_ms(500);
					PORTA = 0;
					_delay_ms(250);
				
				} while (!(~PINC & 0x08));
				
			_delay_ms(500);
		}
		
		else if (!(~PINC & 0x10))				//Turn left 
		{
			
			LCD_Clear();
			LCD_String("Turn Left");			//print string
			
			do 
			{
				PORTA |= 1<<PORTA5;
				_delay_ms(500);
				PORTA |= 1<<PORTA6;
				_delay_ms(500);
				PORTA |= 1<<PORTA7;
				_delay_ms(500);
				PORTA = 0;
				_delay_ms(250);
			} while (!(~PINC & 0x10));
			
		}
		
		 if (!(~PINC & 0x20))				//Bulb dimming mode
		{
			LCD_Clear();
			LCD_String("Night Mode");		//print string
			PORTA |= (1<<PORTA1);
			_delay_ms(500);
		}
		
		
		 if (!(~PINC & 0x80))				//Braking mode
		{
			LCD_Clear();
			LCD_String("Brake mode");		//print string
			PORTA = 0xFC;
			
			_delay_ms(500);
		}
		 if (!(~PINC & 0xA0))				//brake + dim
		{
			do 
			{
				PORTA &= 0xFE;
				_delay_ms(200);
			} while (!(~PINC & 0xA0));
			
		} 
		
		 if (!(~PINC & 0x50))				//dim + left indicator
		{
			do
			{
				
			
			PORTA |= (1<<PORTA1);
			_delay_ms(500);
			PORTA &= ~(1<<PORTA5);
			_delay_ms(500);
			PORTA &= ~(1<<PORTA6);
			_delay_ms(500);
			PORTA &= ~(1<<PORTA7);
			_delay_ms(500);
		
			}while(!(~PINC & 0x50));
			
		}
		if (!(~PINC & 0x48))				 //	dim + right indicator
		{
			do 
			{
				PORTA |= (1<<PORTA1);
				PORTA &= ~(1<<PORTA4);
				_delay_ms(500);
				PORTA &= ~(1<<PORTA3);
				_delay_ms(500);
				PORTA &= ~(1<<PORTA2);
				_delay_ms(500);
			} while (!(~PINC & 0x48));
			


		}
	 if (!(~PINC & 0x90))						//brake + left
		{
			do 
			{
				PORTA |= 0xFC;
				_delay_ms(500);
				PORTA &= ~(1<<PORTA5);
				_delay_ms(500);
				PORTA &= ~(1<<PORTA6);
				_delay_ms(500);
				PORTA &= ~(1<<PORTA7);
				_delay_ms(500);
				
			} while (!(~PINC & 0x90));
			
	
			


		}
		 if (!(~PINC & 0x88))						//brake + right
		{
			do 
			{
				PORTA |= 0xFC;
				_delay_ms(500);
				PORTA &= ~(1<<PORTA4);
				_delay_ms(500);
				PORTA &= ~(1<<PORTA3);
				_delay_ms(500);
				PORTA &= ~(1<<PORTA2);
				_delay_ms(500);
			} while (!(~PINC & 0x88));
			
			

		}
		if (!(~PINC & 0xD0))						//brake left dim
		{
			do 
			{
				PORTA |= 0xFE;
				_delay_ms(500);
				
				PORTA &= ~(1<<PORTA5);
				_delay_ms(500);
				PORTA &= ~(1<<PORTA6);
				_delay_ms(500);
				PORTA &= ~(1<<PORTA7);
				_delay_ms(500);
			} while (!(~PINC & 0xD0));
			
	
		}
		if (!(~PINC & 0xC8))					//brake right dim
		{
			do 
			{
				PORTA |= 0xFE;
				PORTA &= ~(1<<PORTA4);
				_delay_ms(500);
				PORTA &= ~(1<<PORTA3);
				_delay_ms(500);
				PORTA &= ~(1<<PORTA2);
				_delay_ms(500);
			} while (!(~PINC & 0xC8));
			

			
		}
		if (!(~PINC & 0x02))					//ADDAPTIVE DIMMING
		{
			dim();
		}
		if(!(~PINC & 0x00))
		{
			LCD_Clear();
			LCD_String("OFF");
			PORTA = 0x00;
		}
		
	}
}

void scan_blown_bulb()
{
	/*print text on row1*/
	LCD_Clear();
	LCD_Command(0x80);					// go to row1
	
	if ((PIND & (1 << PIND1))==(1 << PIND1))
	{
		
		LCD_Clear();
		blown_bulb_flag=1;
		LCD_String("Bulb L3 Blown");		//print string
		_delay_ms(5000);
	}
		
	if ((PIND & (1 << PIND3))==(1 << PIND3))
	{
		
		LCD_Clear();
		blown_bulb_flag=1;
		LCD_String("Bulb L2 Blown");		//print string
		_delay_ms(5000);
	}
		
	if ((PIND & (1 << PIND4))==(1 << PIND4))
	{
		
		LCD_Clear();
		blown_bulb_flag=1;
		LCD_String("Bulb L1 Blown");		//print string
		_delay_ms(5000);
	}
		
	if ((PIND & (1 << PIND5))==(1 << PIND5))
	{
		
		LCD_Clear();
		blown_bulb_flag=1;
		LCD_String("Bulb R1 Blown");		//print string
		_delay_ms(5000);
	}
	if ((PIND & (1 << PIND6))==(1 << PIND6))
	{
		PORTD = 0xFA;
		LCD_Clear();
		blown_bulb_flag=1;
		LCD_String("Bulb R2 Blown");		//print string
		_delay_ms(5000);
	}
	if ((PIND & (1 << PIND7))==(1 << PIND7))
	{
		
		LCD_Clear();
		blown_bulb_flag=1;
		LCD_String("Bulb R3 Blown");		//print string
		_delay_ms(5000);
	}
	if (!(~PIND &0xFA))
	{
		
	}
}
